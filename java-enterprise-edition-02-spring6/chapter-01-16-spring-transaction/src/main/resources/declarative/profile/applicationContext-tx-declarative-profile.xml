<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置包扫描-->
    <context:component-scan base-package="org.bluebridge.declarative.profile"/>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
        <property name="url" value="jdbc:mysql://host.docker.internal:3306/javaee"/>
    </bean>

    <!--
        配置事务管理器 不同的持久层实现有不同的平台事务管理器
        为什么配置平台事务管理器时需要配置 dataSource属性?
        //先从dataSource对象中获取连接信息
        //使用连接信息创建Connection对象
        Class.forName(driver);
        connection =  DriverManager.getConnection(url,username,password);
        //关闭当前连接的自动提交功能，使用平台事务管理器统一管理事务
        connection.setAutoCommit(false);
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务相关通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                name		：绑定事务的方法名，可以使用通配符，可以配置多个。
                propagation	：传播行为
                isolation	：隔离级别
                read-only	：是否只读
                timeout		：超时信息
                rollback-for：发生哪些异常回滚.
                no-rollback-for：发生哪些异常不回滚.
             -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务切入点配置 -->
    <aop:config>
        <aop:pointcut id="transferPointcut" expression="execution(public * org.bluebridge.declarative.profile.service.AccountServiceImpl.transfer(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transferPointcut"/>
    </aop:config>
</beans>