<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dragonsoft.dynamicsql.dao.IEmpDao">
	<!--
		<if test=""></if>
		冒号要用转义字符&quot;&quot;
		where部分的处理:
			a.WHERE 1=1,并且第一个条件后面拼AND
			b.使用<where></where>:封装查询条件
	-->
	<!--a方式处理-->
	<select id="getEmpsConditionsByIfTag" resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		WHERE 1=1
		<if test="id!=null">
			AND ID = #{id}
		</if>
		<if test="lastName!=null and lastName!=&quot;&quot;">
			AND LAST_NAME = #{lastName}
		</if>
		<if test="email!=null and email.trim()!=&quot;&quot;">
			AND EMAIL = #{email}
		</if>
		<if test="gender==0 or gender ==1">
			AND GENDER = #{gender}
		</if>
	</select>
	<!--b方式处理-->
	<select id="getEmpsConditionsByIfAndWhereTag" resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		<where>
			<if test="id!=null">
				AND ID = #{id}
			</if>
			<if test="lastName!=null and lastName!=&quot;&quot;">
				AND LAST_NAME = #{lastName}
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				AND LAST_NAME = #{email}
			</if>
			<if test="gender==0 or gender ==1">
				AND GENDER = #{gender}
			</if>
		</where>
	</select>

	<!--<choose></choose>标签-->
	<select id="getEmpsConditionsByChooseTag" resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		<where>
			<choose>
				<when test="id!=null">
					ID = #{id}
				</when>
				<when test="lastName!=null and lastName!=&quot;&quot;">
					LAST_NAME LIKE #{lastName}
				</when>
				<when test="email!=null and email.trim()!=&quot;&quot;">
					EMAIL = #{email}
				</when>
				<otherwise>
					GENDER = '1'
				</otherwise>
			</choose>
		</where>
	</select>

	<!--
		<set></set>:封装更新操作
	-->
	<update id="updateEmpsConditionsBySetTage"  databaseId="oracle">
		UPDATE TBL_EMPLOYEE
		<set>
			<if test="gender!=null">
				GENDER = #{gender}
			</if>
			<if test="lastName!=null">
				AND LASTNAME = #{lastName}
			</if>
		</set>
		<where>
			ID = #{id}
		</where>
	</update>

	<!--
		<trim></trim>:封装更新操作
	-->
	<update id="updateEmpsConditionsByTrimTage1"  databaseId="oracle">
		UPDATE TBL_EMPLOYEE
		<trim prefix="set">
			<if test="gender!=null">
				GENDER = #{gender}
			</if>
			<if test="lastName!=null">
			    LASTNAME = #{lastName}
			</if>
		</trim>
		<where>
			ID = #{id}
		</where>
	</update>

	<!--
		<trim></trim>:封装更新操作,并使用trim标签加前缀set,去掉最后的,
	-->
	<update id="updateEmpsConditionsByTrimTage2"  databaseId="oracle">
		UPDATE TBL_EMPLOYEE
		<trim prefix="set" suffixOverrides=",">
			<if test="gender!=null">
				GENDER = #{gender},
			</if>
			<if test="lastName!=null">
				LASTNAME = #{lastName},
			</if>
		</trim>
		<where>
			ID = #{id}
		</where>
	</update>

	<!--for reach-->
	<select id="getEmpsConditionsByForeachTag1" resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		WHERE ID IN(
		<!--
			collection:指定要遍历的集合
				list类型的参数会特殊处理,封装到Map中,map的key就叫list
			item:将遍历出的元素赋值给当前元素
			#{id}:取出当前遍历的元素
			separator:拼接每个时用的分隔符
			index和item
				遍历list:代表索引,item代表当前值
				遍历map:代表key,item代表当前值
		-->
		<foreach collection="ids" item="id" separator=",">
			#{id}
		</foreach>
		)
	</select>

	<!--for reach配合open、close标签-->
	<select id="getEmpsConditionsByForeachTag2" resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		WHERE ID IN
		<!--
			collection:指定要遍历的集合
				list类型的参数会特殊处理,封装到Map中,map的key就叫list
			item:将遍历出的元素赋值给当前元素
			#{id}:取出当前遍历的元素
			separator:拼接每个时用的分隔符
			OPEN:拼接左右括号
			index和item
				遍历list:代表索引,item代表当前值
				遍历map:代表key,item代表当前值
		-->
		<foreach collection="ids" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
	</select>

	<!--
		for reach配合open、close标签
		注意:此程序运行会因为数据类型不匹配而报错,是个坑，要注意
	-->
	<select id="getEmpsConditionsByForeachTag3" parameterType="int"
			resultType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		SELECT * FROM TBL_EMPLOYEE
		WHERE ID IN
		<!--
			collection:指定要遍历的集合
				list类型的参数会特殊处理,封装到Map中,map的key就叫list
			item:将遍历出的元素赋值给当前元素
			#{id}:取出当前遍历的元素
			separator:拼接每个时用的分隔符
			OPEN:拼接左右括号
			index和item
				遍历list:代表索引,item代表当前值
				遍历map:代表key,item代表当前值
		-->
		<foreach collection="ids" item="id" separator="," open="(" close=")" >
			#{id}
		</foreach>
	</select>

	<!--
		使用<foreach></foreach>实现批量保存:
			(下面语句为Oracle语法)
			INSERT ALL
				INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('9','AA','aa@163.com','男')
				INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('10','BB','bb@163.com','男')
				INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('11','CC','cc@163.com','男')
			SELECT * FROM DUAL;
		注意:
			1.要使用#{emp.id},不能使用#{id},后一种写法会报错
			2.支持级联取值,如:#{emp.dept.deptId}
	-->
	<insert id="batchInsertByForeachTag1" parameterType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		INSERT ALL
		<foreach collection="emps" item="emp">
			INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER)
				VALUES (#{emp.id},#{emp.lastName},#{emp.email},#{emp.gender})
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<!--
		使用<foreach></foreach>实现批量保存:
			(下面语句为Oracle语法)
			BEGIN
			INSERT INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('9','AA','aa@163.com','男');
			INSERT INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('10','BB','bb@163.com','男');
			INSERT INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER) VALUES ('11','CC','cc@163.com','男');
			END;
		注意:
			1.要使用#{emp.id},不能使用#{id},后一种写法会报错
			2.支持级联取值,如:#{emp.dept.deptId}
			3.下面格式的批量插入,插入一条数据返回值为1,插入超过一条以上的数据返回-1
	-->
	<insert id="batchInsertByForeachTag2"
			parameterType="com.dragonsoft.dynamicsql.domain.Emp" databaseId="oracle">
		BEGIN
		<foreach collection="emps" item="emp">
			INSERT INTO TBL_EMPLOYEE (ID,LAST_NAME,EMAIL,GENDER)
				VALUES (#{emp.id},#{emp.lastName},#{emp.email},#{emp.gender});
		</foreach>
		END;
	</insert>
</mapper>