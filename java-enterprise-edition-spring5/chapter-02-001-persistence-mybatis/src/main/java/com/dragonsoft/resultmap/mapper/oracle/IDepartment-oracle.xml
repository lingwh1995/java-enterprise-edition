<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dragonsoft.resultmap.dao.IDept">
	<select id="getDeptById"  resultType="com.dragonsoft.resultmap.domain.Department">
		SELECT * FROM TBL_DEPARTMENT WHERE ID = #{id}
	</select>

	<!-- 以TBL_Department为主表，TBL_EMPLOYEE为子表查询数据-->
	<!--
		场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
 	-->
	<!--
	public class Department {
			private Integer id;
			private String dname;
			private List<Employee> emps;
	  id  dname  ||  eid  last_name  email   gender
	 -->
	<!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  -->
	<resultMap type="com.dragonsoft.resultmap.domain.Department" id="MyDept">
		<id column="did" property="id"/>
		<result column="dname" property="dname"/>
		<!--
			collection定义关联集合类型的属性的封装规则
			ofType:指定集合里面元素的类型
		-->
		<collection property="emps" ofType="com.dragonsoft.resultmap.domain.Employee">
			<!-- 定义这个集合中元素的封装规则 -->
			<!-- 注意:如果这里面<id/>标签,那么查询结果会去重，最终只会查询处一条数据-->
			<!--<id column="eid" property="id"/>-->
			<result column="last_name" property="lastName"/>
			<result column="email" property="email"/>
			<result column="gender" property="gender"/>
		</collection>
	</resultMap>
	<select id="getDeptAndEmployeesByIdUseCascade" resultMap="MyDept">
		SELECT
			D.ID AS "DID",
			D.DNAME,
			E.ID AS "EID",
			E.LAST_NAME,
			E.EMAIL EMAIL,
			E.GENDER GENDER
		FROM TBL_DEPARTMENT D
		LEFT JOIN TBL_EMPLOYEE E
		ON D.ID = E.ID
		WHERE D.ID = #{id}
	</select>

	<!-- collection：分段查询 -->
	<resultMap type="com.dragonsoft.resultmap.domain.Department" id="MyDeptStep">
		<id column="id" property="id"/>
		<id column="dname" property="dname"/>
		<collection property="emps"
					select="com.dragonsoft.resultmap.dao.IEmployeeDao.getEmployeeListById"
					column="id" fetchType="lazy">
		</collection>
	</resultMap>
	<select id="getDeptAndEmployeesStepById" resultMap="MyDeptStep">
		SELECT ID,DNAME FROM TBL_DEPARTMENT WHERE ID=#{id}
	</select>

	<!-- 扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
			key：Mapeercom.dragonsoft.resultmap.dao.IEmployeeDao中getEmployeeListById方法:#{xxx}，xxx就是key
		fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	 -->
</mapper>