<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 如果要使用面向接口的方式进行CRUD，则namespace的属性值必须为相应接口的全类名 -->
<!-- SQL语句的id必须为方法名 -->
<mapper namespace="org.bluebridge.mapper.ICarMapper">

    <select id="selectByMultiCondition" resultType="Car">
        <!-- where 1 = 1 保证条件都为空时sql语法可以通过 -->
        <!--
        如果条件都为空，并且没有1 = 1，则SQL语句会变为select * from t_car where，
      会报语法错误
    -->
        select * from t_car where 1 = 1
        <!--
            1. if标签中test属性是必须的。
            2. if标签中test属性的值是false或者true。
                  if标签的test属性中可以写表达式，值为false或者true
            3. 如果test是true，则if标签中的sql语句就会拼接。反之，则不会拼接。
            4. 在test属性中使用接口方法中参数的方式：（与#{}中使用接口方法中参数一样）
                1)当使用了@Param注解，那么test中要出现的是@Param注解指定的参数名。
                    @Param("brand")，那么这里只能使用brand
                2)当没有使用@Param注解，那么test中要出现的是：
                    param1 param2 param3 arg0 arg1 arg2....
                3)当使用了POJO，那么test中出现的是POJO类的属性名。
            5. 在mybatis的动态SQL当中，不能使用&&，只能使用and。
        -->
        <!-- 第一个条件添加and防止“where 1 = 1 brand like "%"#{brand}"%"”语法错误 -->
        <if test="brand != null and brand != ''">
            and brand like "%"#{brand}"%"
        </if>
        <if test="guidePrice != null and guidePrice != ''">
            and guide_price > #{guidePrice}
        </if>
        <if test="carType != null and carType != ''">
            and car_type = #{carType}
        </if>
    </select>
</mapper>