<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.bluebridge.dao.IEmployeeDao">
















	<!--
		使用association定义关联的单个对象的封装规则；
	 -->
	<resultMap type="com.dragonsoft.resultmap.domain.Employee" id="diffResultMapdemo2">
		<!--TBL_EMPLOYEE的ID-->
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<result column="email" property="email"/>

		<!--  association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象
		javaType:指定这个属性对象的类型[不能省略]
		-->
		<association property="department" javaType="com.dragonsoft.resultmap.domain.Department">
			<!--TBL_DEPT的ID-->
			<id column="id" property="id"/>
			<result column="dname" property="dname"/>
		</association>
	</resultMap>
	<!--  public Employee getEmpAndDept(Integer id);-->
	<select id="getEmployeeAndDepartmentByIdUseAssociation" resultMap="diffResultMapdemo2">
		SELECT
			E.ID,E.LAST_NAME ,E.EMAIL,E.GENDER,D.DNAME
		FROM TBL_EMPLOYEE E
		LEFT JOIN TBL_DEPARTMENT D
		ON E.ID = D.ID
		WHERE E.ID=#{id}
	</select>




	<!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
	<!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		我们每次查询Employee对象的时候，都将一起查询出来。
	 		部门信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：
	  -->
	<!--  id  last_name  email   gender    id dname   -->
	<resultMap type="org.bluebridge.domain.Employee" id="MyEmpByStep">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法
            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
         -->
		<association property="department"
					 select="com.dragonsoft.resultmap.dao.IDept.getDeptById"
					 column="id">
		</association>
	</resultMap>
	<select id="getEmployeeAndDepartmentByIdStepUseAssociate" resultMap="MyEmpByStep">
		SELECT * FROM TBL_EMPLOYEE WHERE ID=#{id}
		<if test="_parameter!=null">
			AND 1=1
		</if>
	</select>

	<!--
		场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
 	-->





	<!-- =======================鉴别器============================ -->
	<!-- <discriminator javaType=""></discriminator>
		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出的是女生：就把部门信息查询出来，否则不查询；
			如果是男生，把last_name这一列的值赋值给email;
	 -->
	<resultMap type="com.dragonsoft.resultmap.domain.Employee" id="MyEmpDis">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
		<discriminator javaType="string" column="gender">
			<!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
			<case value="0" resultType="com.dragonsoft.resultmap.domain.Employee">
				<association property="department"
							 select="com.dragonsoft.resultmap.dao.IDept.getDeptById"
							 column="id">
				</association>
			</case>
			<!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
			<case value="1" resultType="com.dragonsoft.resultmap.domain.Employee">
				<id column="id" property="id"/>
				<result column="last_name" property="lastName"/>
				<result column="last_name" property="email"/>
				<result column="gender" property="gender"/>
			</case>
		</discriminator>
	</resultMap>
	<select id="getEmployeeAndDepartmentByIdStepUseDiscriminator" resultMap="MyEmpDis">
		SELECT * FROM TBL_EMPLOYEE WHERE ID=#{id}
		<if test="_parameter!=null">
			AND 1=1
		</if>
	</select>

</mapper>