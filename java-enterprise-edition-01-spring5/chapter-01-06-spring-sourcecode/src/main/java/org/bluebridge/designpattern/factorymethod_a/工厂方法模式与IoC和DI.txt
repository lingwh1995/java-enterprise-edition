IoC:Inversion of Control
    控制反转
DI:Dependency Injection
    依赖注入

关于控制反转和依赖注入的几个问题?
    1.依赖：谁依赖于谁?为什么需要依赖?
    2.注入：谁注入于谁?到底注入什么?
    3.控制反转：谁控制谁?控制什么?为何叫反转(有反转就应该有正转了)?
    4.依赖注入和控制反转是同一概念吗?

下面就来简要的回答一下上述问题，把这些问题搞明白了，IoC/DI也就明白了。
(1)参与者都有谁:
    三方参与者:
        -某个对象:任意的、普通的Java对象
        -Ioc/DI的容器:用来实现IoC/DI功能的一个框架程序
        -某个对象的外部资源:对象的外部资源指的就是对象需要的，但是是从对象外部获取的，都统称资源
(2)谁依赖于谁:
        -当然是某个对象依赖于IoC/DI的容器
(3)为什么需要依赖:
        -对象需要IoC/DI的容器来提供对象需要的外部资源
(4)谁注入于谁:
        -很明显是IoC/DI的容器 注入 某个对象
(5)到底注入什么:
        -就是注入某个对象所需要的外部资源
(6)谁控制谁:
        -当然是IoC/DI的容器来控制对象了
(7)控制什么:
        主要是控制对象实例的创建
(8)为何叫反转：
        反转是相对于正向而言的，那么什么算是正向的呢?
        正向:
            A类中要用到B类,直接在A类中创建一个B类的对象
            public class A{
                B b = new B();
                b.xxx();
            }
        反转:有了IoC和DI容器之后,A类不在主动去创建B类了,此时B类相当于外部资源
            通过IoC容器去管理B类对象,A类中需要用到B类对象，不要在A类中创建B类了,而是执行下面操作:
                step1:通过IoC容器创建一个B类
                step2:通过Ioc容器把B类反向注入到A类中
            <!-- 此时已经B类已经被Ioc容器所管理 -->
            <bean id="b" class="">
            <!-- 通过IoC容器反向把B类注入到A类中-->
            <bean id="A" ref="b"/>
(9)依赖注入和控制反转是同一概念吗?
        依赖注入和控制反转是对同一件事的不同角度的描述
        依赖注入强调:通过IoC容器来完成依赖注入的过程
        控制反转强调:把创建对象和管理对象的权利交给具体的容器去做,使用者只负责使用，不负责对象的创建和管理
(10)小结一下:
        程序需要一个资源,以A类要用到B类为例:
            没有使用IoC/DI:A类主动的去创建B类对象
                在A类中:B b = new B();
            使用IoC和DI之后:
                1.A类需要一个B类的对象,A类并不会去主动的创建一个B类对象，而是通过Ioc容器去获取该对象,没有
                  获取到，就等待IoC容器去创建这个对象,IoC容器创建了B类这个对象,此时A类可以使用这个对象了
                2.在面向接口编程思想中，如果A类完成一个操作依赖的是一个接口B,有了IoC容器之后,A类不用关注
                  具体是接口B的哪个子类执行的具体操作,A类只管使用接口B去完成相关操作即可
                      public class A{
                        //A中注入B对象
                        private B b;

                        @Test
                        public void fun(){
                            //注意:此时A并不知道自己使用的B的SubB1还是SubB2实例，A不关注这些问题，
                            //A只管使用b对象完成某些操作
                            b.operate();
                        }

                      }

                      public interface B{
                        void operate();
                      }

                      public class SubB1 implements B{
                        public void operate(){
                            System.out.println("我是B的子类SubB1中执行的操作......");
                        }
                      }

                      public class SubB2 implements B{
                        public void operate(){
                            System.out.println("我是B的子类SubB2中执行的操作......");
                        }
                      }
