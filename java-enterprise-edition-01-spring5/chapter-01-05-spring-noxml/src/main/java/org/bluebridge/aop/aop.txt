AOP:动态代理
    指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式
通知类型:
    前置通知(@Before):
    后置/最终通知(@After):无论方法正常调用,异常调用都会执行
    返回通知(@AfterReturning):
    异常通知(@AfterThrowing):
    环绕通知(@Around):动态代理, 需要手动推进目标方法运行(jointPoint.proceed())
基于配置类的AOP步骤:
     1.导入aop模块：Spring AOP(spring-aspects)
     2.定义一个业务员逻辑类，并且在业务逻辑运行的时候动态的将日志进行打印
     3.定义一个日志切面类
     4.给切面类的目标方法标注何时运行(通知注解),可以使用切入点
     5.将切面类和业务逻辑类(目标方法所在类)都加入容器中
     6.给切面类上加上@Aspect注解
     7.给配置类上加上@EnableAspectJAutoProxy,表示开启基于注解的AOP
注意:(JointPoint joint)这个参数如果在方法中使用的话,一定要放在第一个参数的位置,否则程序会报错
